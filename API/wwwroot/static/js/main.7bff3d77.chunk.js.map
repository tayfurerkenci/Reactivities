{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","errors/TestError.tsx","errors/NotFound.tsx","errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","activityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayname","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","ProfileStore","currentUserProfile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","followingCount","loadFollowings","loadUserActivities","ActivityStore","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","bio","length","slice","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7bff3d77.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination)\r\n    {\r\n        this.data=data;\r\n        this.pagination=pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber=1, pageSize=2){\r\n        this.pageNumber=pageNumber;\r\n        this.pageSize=pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        // we used as AxiosResponse for intellisense type safety\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n    \r\n}, (error: AxiosError) => {\r\n\r\n    const {data, status, config} = error.response!;\r\n\r\n    switch (status)\r\n    {\r\n        case 400:\r\n            if(typeof data === 'string'){\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors)\r\n                {\r\n                    if(data.errors[key])\r\n                    {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            toast.error('not found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n        \r\n    }\r\n    return Promise.reject(error);\r\n\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests={\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = { \r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type':'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put<void>(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)    \r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost?: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?:ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string='';\r\n    category: string ='';\r\n    description: string = '';\r\n    date: Date | null=null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity? : ActivityFormValues)\r\n    {\r\n        if(activity)\r\n        {\r\n            this.id=activity.id;\r\n            this.title=activity.title;\r\n            this.category=activity.category;\r\n            this.description=activity.description;\r\n            this.date=activity.date;\r\n            this.venue=activity.venue;\r\n            this.city=activity.city;\r\n        }\r\n    }\r\n\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User)\r\n    {\r\n        this.username=user.username;\r\n        this.displayName=user.displayName;\r\n        this.image=user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\"; \r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n// import { fi, th } from \"date-fns/locale\";\r\n\r\nexport default class activityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams= new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                // when predicate changes, reset the pagination\r\n                this.pagingParams= new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n            \r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial=true;\r\n        // synchronous code inside try catch block!\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }catch(error)\r\n        {  \r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination=pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }else {\r\n            this.loadingInitial=true;\r\n            try {\r\n                activity=await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity=activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error)\r\n            {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    // private helper methods\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if(user)\r\n        {\r\n            activity.isGoing=activity.attendees!.some(\r\n                a=>a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    //\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    \r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try{\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername=user!.username;\r\n            newActivity.attendees=[attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id)\r\n                {\r\n                    let updatedActivity={...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        \r\n        this.loading = true;\r\n        \r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n\r\n                this.loading=false;\r\n            })\r\n\r\n        } catch (error) \r\n        {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading=false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading=true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees=\r\n                        this.selectedActivity.attendees?.filter(a=>a.username!==user?.username);\r\n                    this.selectedActivity.isGoing=false;\r\n                }else{\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing=true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n        }\r\n        finally\r\n        {\r\n            runInAction(()=> this.loading=false) ;\r\n        }\r\n    }\r\n    \r\n    cancelActivityToggle= async () => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled=!this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } \r\n        finally\r\n        {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    } \r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username)\r\n                {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null=null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn()\r\n    {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user=user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error)\r\n        {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () =>\r\n    {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user=null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) =>\r\n    {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user=user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch(error)\r\n        {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user)\r\n            this.user.image = image;\r\n    }\r\n\r\n    setDisplayname = async (displayName:string) => {\r\n        if(this.user)\r\n            this.user.displayName=displayName;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading=true;\r\n\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading=false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(()=>this.fbLoading=false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        }else{\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    currentUserProfile: Profile | null = null;\r\n    profile: Profile | null=null;\r\n    loadingProfile=false;\r\n    uploading=false;\r\n    loading=false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab=0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab===4){\r\n                    const predicate= activeTab ===3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                }else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab=activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile=true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile=profile;\r\n                this.loadingProfile=false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=> this.loadingProfile=false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading=true;\r\n        try {\r\n            \r\n            const response=await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user)\r\n                    {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image=photo.url;\r\n                    }\r\n                }\r\n                this.uploading=false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=> this.uploading=false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos)\r\n                {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain=false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain=true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading=false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=> {\r\n                if(this.profile){\r\n                    this.profile.photos = this.profile.photos?.filter(p=>p.id !== photo.id);\r\n                    this.loading=false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(()=> this.loading=false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile : Partial<Profile>) => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(()=>{\r\n                if(profile.displayName && \r\n                        profile.displayName !== store.userStore.user?.displayName)\r\n                {\r\n                    store.userStore.setDisplayname(profile.displayName);\r\n                }\r\n                    this.profile={...this.profile, ...profile as Profile};\r\n                    this.loading=false;\r\n                \r\n            })\r\n        } catch (error) {\r\n            runInAction(()=> this.loading=false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore.user?.username\r\n                    && this.profile.username === username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;   \r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following\r\n                    }\r\n                })\r\n                this.loading=false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loading=true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings=false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities=true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}   ","import ActivityStore from './activityStore';\r\nimport { createContext, useContext } from \"react\"\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext); \r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/ServerError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null=window.localStorage.getItem('jwt');\r\n    appLoaded=false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token =>  // we pass the token as a parameter\r\n            {\r\n                if(token)\r\n                {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else\r\n                {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error=error;\r\n    }\r\n\r\n    setToken = (token: string | null) => \r\n    {\r\n        // if(token) window.localStorage.setItem('jwt', token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () =>\r\n    {\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    \r\n\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\n\r\nexport default class ModalStore \r\n{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n    \r\n    constructor()\r\n    {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal=(content: JSX.Element) =>\r\n    {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n    closeModal=() =>\r\n    {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor()\r\n    {\r\n        // comments and hubconnection get marked as observables\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    // create hub connection\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity)\r\n        {\r\n            this.hubConnection=new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    // we pass our token\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n                this.hubConnection.start()\r\n                    .catch(error=>console.log('Error establishing the connection: ', error));\r\n\r\n                // this string must exactly same the one in the chathub.cs\r\n                this.hubConnection.on('LoadComments', (comments: ChatComment[])=> {\r\n                    // update our observable inside store\r\n                    runInAction(()=> {\r\n                        // converting string date value to javascript date value\r\n                        comments.forEach(comment => {\r\n                            // z for utc time\r\n                            comment.createdAt=new Date(comment.createdAt + 'Z');\r\n                        })\r\n                        this.comments=comments\r\n                    });\r\n                })\r\n                \r\n                // get comment from server with 'ReceiveComment and push it to the server\r\n                // users in the activity id signalr group will receive the comment\r\n                this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                    runInAction(() => {\r\n                        // converting string date value to javascript date value\r\n                        comment.createdAt=new Date(comment.createdAt);\r\n                        //this.comments.push(comment)\r\n                        this.comments.unshift(comment)\r\n                    });\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            // we are calling the method on the backend\r\n            // method name must be exactly same\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} =useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position='right' >\r\n                    <Image src={user?.image || '/assets/user.png' } avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text=\"My Profile\" icon='user' />\r\n                            <Dropdown.Item onClick={logout} text=\"Logout\" icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters (){\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n        <Menu vertical size='large' style={{width: '100%', marginTop: 25 }}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n                content='All Activities' \r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item \r\n                content=\"I'm going\"\r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')} \r\n            />\r\n            <Menu.Item \r\n                content=\"I'm hosting\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n            />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar\r\n            onChange={(date) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n        />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props){\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic \r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ?  'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card,Icon,Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props){\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                    {profile.bio && profile.bio?.length>40 ? profile.bio?.slice(0,37)+'...' : profile.bio}\r\n                </Card.Description>\r\n                <Card.Description>\r\n                    <Icon name='user' />\r\n                    {profile.followersCount} followers\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props)\r\n{\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props){\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label \r\n                        attached='top' \r\n                        color='red' \r\n                        content='Cancelled' \r\n                        style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>  \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                              {activity.isGoing && !activity.isHost &&  (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> {activity.description} </span>\r\n                <Button  \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                /> \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nexport default observer(function ActivityList(){\r\n\r\n    const {activityStore} = useStore();\r\n\r\n    const {groupedActivities} = activityStore;\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => \r\n                (\r\n                    <Fragment key={group}>\r\n                        <Header sub color='teal'>\r\n                            {group}\r\n                        </Header>\r\n\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                            \r\n                    </Fragment>\r\n                )\r\n            )}\r\n        </>\r\n        \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nexport default observer(\r\n\r\n    function ActivityDashboard() {\r\n\r\n        const { activityStore } = useStore();\r\n\r\n        const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n\r\n        const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n        function handleGetNext() {\r\n            setLoadingNext(true);\r\n            setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n            loadActivities().then(() => setLoadingNext(false));\r\n        }\r\n\r\n        useEffect(() => {\r\n            if (activityRegistry.size <= 1) loadActivities();\r\n        }, [activityRegistry.size, loadActivities])\r\n\r\n\r\n        return (\r\n            <Grid>\r\n                <Grid.Column width=\"10\">\r\n                    {activityStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder />\r\n                        </>\r\n                    ) : (\r\n\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='6'>\r\n                    <ActivityFilters />\r\n                </Grid.Column>\r\n                <Grid.Column width={10}>\r\n                    <Loader active={loadingNext} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n\r\n    })","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string; \r\n}\r\n\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password' }))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error} /> }\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any ) => (\r\n                        <Message.Item key={i} > \r\n                            {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n        \r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header} from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm(){\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error ' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} /> }\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage(){\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >\r\n                            Go to Activities!\r\n                        </Button>\r\n                            </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />) } size='huge' inverted >\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />) } size='huge' inverted >\r\n                                Register!\r\n                            </Button>\r\n                            <Divider horizontal inverted>Or</Divider>\r\n                            <Button\r\n                                size='huge'\r\n                                inverted\r\n                                color='facebook'\r\n                                content='Login with Facebook'\r\n                                onClick={userStore.facebookLogin}\r\n                            />\r\n                       </>\r\n                )}\r\n                \r\n                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content='Loading...'}: Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string; \r\n}\r\n\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string; \r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid} from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm(){\r\n\r\n    const history = useHistory();\r\n\r\n    const {activityStore} = useStore();\r\n\r\n    const { createActivity, updateActivity, \r\n        loadActivity, loadingInitial} = activityStore;\r\n\r\n    const {id} = useParams<{id: string}>();\r\n    \r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n   useEffect(() => {\r\n       if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n   }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues){\r\n        if(!activity.id){\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    // function handleChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>){\r\n    //     const {name, value} = event.target;\r\n    //     setActivity({...activity, [name]:value})\r\n    // }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing> \r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                        <MyTextInput name='title' placeholder='Title'  />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' \r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='city' />\r\n                        <MyTextInput placeholder='Venue'  name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' \r\n                            content='Submit'\r\n                         />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                  </Form>\r\n                )}\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    // when we load this component, we should create hub connection\r\n    // we dont want to connection if we dont have activity id\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + ENTER for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e=>{\r\n                                                    if(e.key === 'Enter' && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey)\r\n                                                    {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`} >\r\n                                    {comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                                {/* <Comment.Actions>\r\n                                    <Comment.Action>Reply</Comment.Action>\r\n                                </Comment.Actions> */}\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                                \r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex:1000, left:-14,top:20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`} >{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading} \r\n                        />\r\n                        <Button \r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange'\r\n                             floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance} >Cancel attendance</Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled} \r\n                        loading={loading}\r\n                        onClick={updateAttendance} \r\n                        color='teal'>\r\n                            Join Activity\r\n                        </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                        {attendee.username === host?.username &&\r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>}\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                            </Item.Header>\r\n                            {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails(){\r\n\r\n    const {activityStore} = useStore();\r\n\r\n    const {selectedActivity: activity, \r\n        loadActivity, loadingInitial, clearSelectedActivity}= activityStore;\r\n\r\n    const {id} = useParams<{id: string}>()\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n               <ValidationErrors errors={errors} />     \r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../app/stores/store';\r\n\r\nexport default observer(function ServerError(){\r\n    const {commonStore} = useStore();\r\n    \r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>\r\n                        {commonStore.error.details}\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer()\r\n{\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n})","import { Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { Button } from 'semantic-ui-react';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\n\r\ninterface Props{\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}:Props){\r\n    const { profileStore: {profile, updateProfile} } = useStore();\r\n    //const { profile, updateProfile } = profileStore;\r\n    \r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required() \r\n            })}\r\n\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className=\"ui form\">\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nexport default observer(function ProfileAbout(){\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false)\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n            <Grid.Column width='16'>\r\n                <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                {isCurrentUser && (\r\n                    <Button\r\n                        floated='right'\r\n                        basic\r\n                        content={editMode ? 'Cancel' : 'EditProfile'}\r\n                        onClick={() => setEditMode(!editMode)}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='16'>\r\n                {editMode ?\r\n                    <ProfileEditForm setEditMode={setEditMode} /> \r\n                    :\r\n                    <span style={{whiteSpace:'pre-wrap'}}>\r\n                        {profile?.bio}\r\n                    </span>    \r\n                }\r\n            </Grid.Column>\r\n            </Grid> \r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}  >\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                       {followings.map(profile => (\r\n                           <ProfileCard key={profile.username} profile={profile} />\r\n                       ))} \r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props)\r\n{\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height:200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n            \r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    // Do something with the files\r\n    setFiles(acceptedFiles.map((file: any)=> Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n    console.log(acceptedFiles);\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props)\r\n{\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop()\r\n    {\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob=>uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        return () => {\r\n            files.forEach((file:any)=>URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                   <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                   <Button.Group widths={2}>\r\n                       <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                       <Button disabled={loading} onClick={()=>setFiles([])} icon='close' />\r\n                   </Button.Group>    \r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Image, Tab, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target,setTarget] =useState('');\r\n\r\n    function handlePhotoUpload(file: Blob)\r\n    {\r\n        uploadPhoto(file).then(()=>setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>)\r\n    {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo,e )}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                loading={target===photo.id && loading}\r\n                                                onClick={e=> handleDeletePhoto(photo,e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}:Props)\r\n{\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}  />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}:Props)\r\n{\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />    \r\n                            </Item.Content>    \r\n                        </Item>         \r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n\r\n        // clean up function\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../errors/NotFound';\r\nimport ServerError from '../../errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n  \r\n  useEffect(() => \r\n  {\r\n    if(commonStore.token)\r\n    {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    }\r\n    else\r\n    {\r\n        userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <Fragment>\r\n        <ToastContainer position='bottom-right' hideProgressBar />\r\n        <ModalContainer />\r\n        <Route exact path='/' component={HomePage} />\r\n        <Route \r\n          path={'/(.+)'}\r\n          render={() => (\r\n            <>\r\n              <NavBar />\r\n              <Container style={{marginTop: '7em'}}>\r\n                <Switch>\r\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                  <PrivateRoute path='/errors' component={TestErrors} />\r\n                  <Route path='/server-error' component={ServerError} />\r\n                  <Route component={NotFound} />\r\n                </Switch>\r\n              </Container>\r\n            </>\r\n          )} \r\n        \r\n        />\r\n        \r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';  \r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store} >\r\n    <Router history={history}>\r\n       <ScrollToTop /> \r\n       <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}